// lib/atualizarGraduacao.ts
import { prisma } from "./prisma";

export async function atualizarGraduacao(userId: number) {
  if (!userId || isNaN(userId)) {
    console.warn("ID de usu√°rio inv√°lido:", userId);
    return;
  }

  // üîé Busca apenas os dados necess√°rios do usu√°rio
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: { id: true, pontos: true, graduacaoId: true },
  });

  if (!user) {
    console.warn(`Usu√°rio n√£o encontrado: ${userId}`);
    return;
  }

  // üîπ Busca todas as gradua√ß√µes ordenadas por pontos (maior ‚Üí menor)
  const graduacoes = await prisma.graduacao.findMany({
    orderBy: { pontos: "desc" },
  });

  // Seleciona a maior gradua√ß√£o que o usu√°rio atingiu
  const graduacaoAtual = graduacoes.find((g) => user.pontos >= g.pontos);
  if (!graduacaoAtual) {
    console.log(`Usu√°rio ${user.id} n√£o atingiu nenhuma gradua√ß√£o`);
    return;
  }

  // Atualiza a gradua√ß√£o do usu√°rio se for diferente da atual
  if (user.graduacaoId !== graduacaoAtual.id) {
    await prisma.user.update({
      where: { id: user.id },
      data: { graduacaoId: graduacaoAtual.id },
    });
    console.log(
      `‚úÖ Usu√°rio ${user.id} atualizado para gradua√ß√£o ${graduacaoAtual.nome}`
    );
  }
}
