generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  nome               String
  senha              String
  saldo              Decimal              @default(0)
  valorInvestido     Decimal              @default(0)
  indicadoPorId      Int?
  cpf                String               @unique
  pontos             Int                  @default(0)
  graduacaoId        Int?
  lastLogin          DateTime?
  carteira           String?              @unique
  pixKey             String?              @unique   // ðŸ‘ˆ NOVO CAMPO PARA PIX
  bonusResidual      Decimal              @default(0)
  photoUrl           String?
  depositos          Deposito[]
  investimentos      Investimento[]
  onChainDeposits    OnChainDeposit[]
  rendimentos        RendimentoDiario[]
  saques             Saque[]
  graduacao          Graduacao?           @relation(fields: [graduacaoId], references: [id])
  indicadoPor        User?                @relation("Indicacoes", fields: [indicadoPorId], references: [id])
  indicados          User[]               @relation("Indicacoes")
  withdrawalRequests WithdrawalRequest[]
}

model Saque {
  id           Int         @id @default(autoincrement())
  userId       Int
  valor        Decimal
  status       StatusSaque @default(pendente)
  criadoEm     DateTime    @default(now())
  processadoEm DateTime?
  txHash       String?     @unique
  descricao    String?
  endToEndId   String?     @unique
  chave        String?
  metodo       String      @default("PIX")
  responseApi  String?
  txId         String?
  user         User        @relation(fields: [userId], references: [id])
}

model Deposito {
  id       Int            @id @default(autoincrement())
  valor    Decimal
  criadoEm DateTime       @default(now())
  userId   Int
  status   StatusDeposito @default(pendente)
  metodo   String         @default("manual")
  user     User           @relation(fields: [userId], references: [id])
}

model Investimento {
  id                  Int                @id @default(autoincrement())
  valor               Decimal
  criadoEm            DateTime           @default(now())
  userId              Int
  percentualDiario    Decimal            @default(0.025)
  rendimentoAcumulado Decimal            @default(0)
  ativo               Boolean            @default(true)
  limite              Decimal            @default(0)
  user                User               @relation(fields: [userId], references: [id])
  rendimentos         RendimentoDiario[]
}

model RendimentoDiario {
  id             Int          @id @default(autoincrement())
  userId         Int
  dateKey        String
  base           Decimal
  rate           Decimal
  amount         Decimal
  createdAt      DateTime     @default(now())
  investimentoId Int
  investimento   Investimento @relation(fields: [investimentoId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, investimentoId, dateKey], name: "userId_investimentoId_dateKey")
}

model Graduacao {
  id     Int    @id @default(autoincrement())
  nome   String
  pontos Int    @unique
  users  User[]
}

model OnChainDeposit {
  id           Int            @id @default(autoincrement())
  txHash       String         @unique
  from         String
  to           String
  amount       Decimal
  createdAt    DateTime       @default(now())
  userId       Int?
  status       StatusDeposito @default(pendente)
  confirmadoEm DateTime?
  user         User?          @relation(fields: [userId], references: [id])
}

model WithdrawalRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Decimal
  pixKey      String
  description String?
  status      String   @default("PENDING")
  idEnvio     String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

enum StatusDeposito {
  pendente
  confirmado
  cancelado
  aguardando
  em_analise
}

enum StatusSaque {
  pendente
  processando
  concluido
  rejeitado
}

enum Venue {
  ALPACA
  OANDA
  B3_SIM
}

enum SignalSide {
  long
  short
  flat
}

enum Side {
  buy
  sell
}

enum OrderType {
  market
  limit
  stop
  stop_limit
}

enum OrderStatus {
  new
  accepted
  partially_filled
  filled
  canceled
  rejected
}
