generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  nome                String
  senha               String
  saldo               Decimal              @default(0)
  valorInvestido      Decimal              @default(0)
  indicadoPorId       Int?
  cpf                 String               @unique
  pontos              Int                  @default(0)
  graduacaoId         Int?
  lastLogin           DateTime?
  carteira            String?              @unique
  pix                 String?
  usdt                String?
  bonusResidual       Decimal              @default(0)
  photoUrl            String?
  quantidadeZiller    Decimal              @default(0) // ✅ novo campo adicionado

  // Relações financeiras
  depositos           Deposito[]
  investimentos       Investimento[]
  onChainDeposits     OnChainDeposit[]
  rendimentos         RendimentoDiario[]
  saques              Saque[]
  withdrawalRequests  WithdrawalRequest[]

  // Relações de rede
  graduacao           Graduacao?           @relation(fields: [graduacaoId], references: [id])
  indicadoPor         User?                @relation("Indicacoes", fields: [indicadoPorId], references: [id])
  indicados           User[]               @relation("Indicacoes")

  // Recuperação de senha (tokens temporários)
  passwordResetTokens PasswordResetToken[]

  // Rede social
  posts               Post[]
  likes               Like[]
  comments            Comment[]

  @@map("users")
}

model Instrument {
  id       Int     @id @default(autoincrement())
  symbol   String
  venue    String
  tickSize Float

  @@unique([symbol, venue])
  @@map("instruments")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("password_reset_tokens")
}

model Saque {
  id           Int         @id @default(autoincrement())
  userId       Int
  valor        Decimal
  metodo       String
  chave        String
  status       StatusSaque @default(pendente)
  criadoEm     DateTime    @default(now())
  processadoEm DateTime?
  txHash       String?     @unique
  descricao    String?
  endToEndId   String?     @unique
  responseApi  String?
  txId         String?
  user         User        @relation(fields: [userId], references: [id])

  @@map("saques")
}

model Deposito {
  id       Int            @id @default(autoincrement())
  valor    Decimal
  criadoEm DateTime       @default(now())
  userId   Int
  status   StatusDeposito @default(pendente)
  metodo   String         @default("manual")
  user     User           @relation(fields: [userId], references: [id])

  @@map("depositos")
}

model Investimento {
  id                  Int                @id @default(autoincrement())
  valor               Decimal
  criadoEm            DateTime           @default(now())
  userId              Int
  percentualDiario    Decimal            @default(0.015)
  rendimentoAcumulado Decimal            @default(0)
  ativo               Boolean            @default(true)
  limite              Decimal            @default(0)
  user                User               @relation(fields: [userId], references: [id])
  rendimentos         RendimentoDiario[]

  @@map("investimentos")
}

model RendimentoDiario {
  id             Int          @id @default(autoincrement())
  userId         Int
  dateKey        String
  base           Decimal
  rate           Decimal
  amount         Decimal
  createdAt      DateTime     @default(now())
  investimentoId Int
  investimento   Investimento @relation(fields: [investimentoId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, investimentoId, dateKey], name: "userId_investimentoId_dateKey")
  @@map("rendimentos_diarios")
}

model Graduacao {
  id     Int    @id @default(autoincrement())
  nome   String
  pontos Int    @unique
  users  User[]

  @@map("graduacoes")
}

model OnChainDeposit {
  id           Int            @id @default(autoincrement())
  txHash       String         @unique
  from         String
  to           String
  amount       Decimal
  createdAt    DateTime       @default(now())
  userId       Int?
  status       StatusDeposito @default(pendente)
  confirmadoEm DateTime?
  user         User?          @relation(fields: [userId], references: [id])

  @@map("on_chain_deposits")
}

model WithdrawalRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Decimal
  pixKey      String
  description String?
  status      String   @default("PENDING")
  idEnvio     String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("withdrawal_requests")
}

/* ---------------------------
   MODELOS DO MURAL / SOCIAL
   --------------------------- */

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  imageUrl   String?
  anonName   String?
  authorId   Int?
  author     User?     @relation(fields: [authorId], references: [id])
  likes      Like[]
  comments   Comment[]
  destaqueIA Boolean   @default(false)
  tipo       String    @default("trader")
  createdAt  DateTime  @default(now())

  @@map("posts")
  @@index([createdAt])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId], name: "unique_user_post_like")
  @@map("likes")
  @@index([postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  anonName  String?
  createdAt DateTime @default(now())

  @@map("comments")
  @@index([postId, createdAt])
}

/* ---------------------------
   ENUMS
   --------------------------- */

enum StatusDeposito {
  pendente
  confirmado
  cancelado
  aguardando
  em_analise
}

enum StatusSaque {
  pendente
  processando
  concluido
  rejeitado
}

enum Venue {
  ALPACA
  OANDA
  B3_SIM
}

enum SignalSide {
  long
  short
  flat
}

enum Side {
  buy
  sell
}

enum OrderType {
  market
  limit
  stop
  stop_limit
}

enum OrderStatus {
  new
  accepted
  partially_filled
  filled
  canceled
  rejected
}
